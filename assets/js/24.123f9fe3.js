(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{542:function(t,a,s){"use strict";s.r(a);var n=s(17),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"let-const-var之间的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let-const-var之间的区别"}},[t._v("#")]),t._v(" let const var之间的区别")]),t._v(" "),s("p",[t._v("ECMAScript变量是松散类型的。意思是变量可以用于保存任何的数据类型。在ES5版本中只能使用"),s("code",[t._v("var")]),t._v("声明变量。到了ES6版本中新出了"),s("code",[t._v("let和const")]),t._v("两个关键字也可以用于声明变量。let和const相较于var在声明变量上更加的严谨。在本文中重点讨论var、let和const这三者之间的区别，主要会从"),s("code",[t._v("作用域、变量提升、重复声明等")]),t._v("方面指出其差异性。")]),t._v(" "),s("img",{staticStyle:{zoom:"150%"},attrs:{src:"https://i.loli.net/2021/10/06/6ebOkxrfpnSc39W.png",alt:"let_const_var之间的区别"}}),t._v(" "),s("h2",{attrs:{id:"一、var"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、var"}},[t._v("#")]),t._v(" 一、var")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_1-var声明作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-var声明作用域"}},[t._v("#")]),t._v(" 1. var声明作用域")]),t._v(" "),s("p",[t._v("作用域可以简单的理解为一个变量的可见性以及可访问性，本质上指变量可供访问的范围。var可以在全局范围声明也可以在函数/局部范围声明。")]),t._v(" "),s("ul",[s("li",[t._v("在全局通过var声明的变量，相当于是在window对象上添加的属性，可以在任何地方进行访问。")]),t._v(" "),s("li",[t._v("在函数内部通过var声明的变量，其作用域是局部的，只能够在函数内部进行访问。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" outer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" inner "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my name is Langyixuan'")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inner"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// my name is Langyixuan")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inner"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: inner is not defined")]),t._v("\n")])])]),s("p",[t._v("根据上述例子可以看出，通过var在全局定义的变量可以在函数内部进行访问，但是在函数内部声明的变量无法在函数外部进行访问。")]),t._v(" "),s("h3",{attrs:{id:"_2-var的变量提升机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-var的变量提升机制"}},[t._v("#")]),t._v(" 2. var的变量提升机制")]),t._v(" "),s("p",[t._v("在全局作用域或者是在函数(局部)作用域中，使用"),s("code",[t._v("var")]),t._v("关键字声明的变量，在预编译阶段都会被提升到相对作用域的最顶部，并将其的初始值赋值为undefined。这样即使在没有执行到变量的定义及赋值之前访问变量也不会报错。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nfuntion "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inner"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" inner "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my name is Langyixuan'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" outer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),s("p",[t._v("上面的代码会被js引擎解析为")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" outer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" inner "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inner"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    inner "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my name is Langyixuan'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nouter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-var的重复声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-var的重复声明"}},[t._v("#")]),t._v(" 3. var的重复声明")]),t._v(" "),s("p",[t._v("可以反复多次使用var来声明同一个变量")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 36")]),t._v("\n")])])]),s("p",[t._v("但是在这里也暴露出了var的弱点，比如看下面的例子")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'apple'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'peach'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// peach")]),t._v("\n")])])]),s("p",[t._v("本意上我们是想在if的内部重新声明一个tag变量，但是不知道以前在全局声明过tag变量，这样就导致污染了全局变量，这也是var关键字声明变量的不便之处，也就引出了为什么会需要let和const的原因了。")]),t._v(" "),s("h2",{attrs:{id:"二、-let"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、-let"}},[t._v("#")]),t._v(" 二、 let")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_1-let-声明的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-let-声明的作用域"}},[t._v("#")]),t._v(" 1. let 声明的作用域")]),t._v(" "),s("p",[s("code",[t._v("let")]),t._v(" 和 var的作用差不多，但是有着非常重要的区别。其最明显的区别是，let声明的最小范围是"),s("code",[t._v("块级作用域")]),t._v("，而var是函数作用域。"),s("code",[t._v("块")]),t._v("是由{}界定的代码块，在带有let的块中声明的变量仅可以在该块中使用。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Langyixuan'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ReferenceError: name没有定义")]),t._v("\n")])])]),s("p",[t._v("从上述例子可以看出，在if条件语句中声明的name变量无法在条件语句外部访问")]),t._v(" "),s("h3",{attrs:{id:"_2-let-的变量提升机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-let-的变量提升机制"}},[t._v("#")]),t._v(" 2. let 的变量提升机制")]),t._v(" "),s("p",[t._v("在网上看了很多文章都非常笼统的解释到说let是不存在变量的提升的。但是在我看了一些比较深入且详细的文章后，我认为说let不存在变量提升的这种说法不是很严谨，可以说let不存在变量提升的效果，但是其实let是存在变量提升的。这个问题怎么进行解释呢，看个例子🌰")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Uncaught ReferenceError: Cannot access 'x' before initialization")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("   \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如果说块级内部的声明的x不存在变量的提升，那么输出时访问的x是块级外部定义的x，但是访问x时却报错了。报错的内容翻译过来就是"),s("code",[t._v("初始化前无法访问“x”")]),t._v("，所以正确的理解应该是")]),t._v(" "),s("ul",[s("li",[t._v("用"),s("code",[t._v("var")]),t._v("声明的变量会被提升到其作用域的顶部，并使用 undefined 值对其进行初始化。")]),t._v(" "),s("li",[t._v("用"),s("code",[t._v("let")]),t._v("声明的变量会被提升到其作用域的顶部，不会对值进行初始化。")])]),t._v(" "),s("p",[t._v("所以在使用let声明变量之前，都是无法成功访问该变量。这在语法上被称为"),s("code",[t._v("暂时性死区(简称TDZ)")]),t._v("，如果访问TDZ中的变量就会抛出错误。")]),t._v(" "),s("h3",{attrs:{id:"_3-let-的重复声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-let-的重复声明"}},[t._v("#")]),t._v(" 3. let 的重复声明")]),t._v(" "),s("p",[t._v("就像"),s("code",[t._v("var")]),t._v("一样，用"),s("code",[t._v("let")]),t._v("声明的变量可以在其范围内被修改。 但与"),s("code",[t._v("var")]),t._v("不同的是，"),s("code",[t._v("let")]),t._v("变量无法在其作用域内被重新声明。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lang'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yiuxan'")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: Identifier 'name' has already been declared")]),t._v("\n")])])]),s("p",[t._v("重复通过let声明同一个变量会报错。")]),t._v(" "),s("h2",{attrs:{id:"const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("const的行为和let基本相同（在作用域和变量提升机制方面一致，这里就不再重复赘述了），唯一一个重要的区别是用const进行声明变量时，必须同时初始化变量，且通过const声明的变量初始化后，其指就不能再进行更改。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("const")]),t._v("声明一个只读的常量，一旦声明，常量的值就不能改变")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeError: Assignment to constant variable.")]),t._v("\n")])])]),s("ul",[s("li",[t._v("这意味着，"),s("code",[t._v("const")]),t._v("一旦声明变量，就必须立即初始化，不能留到以后赋值")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError: Missing initializer in const declaration")]),t._v("\n")])])]),s("h2",{attrs:{id:"总结var-let-const的差异"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结var-let-const的差异"}},[t._v("#")]),t._v(" 总结var let const的差异")]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[s("code",[t._v("var")]),t._v("声明是全局作用域或函数作用域，而"),s("code",[t._v("let")]),t._v("和"),s("code",[t._v("const")]),t._v("是块作用域。")]),t._v(" "),s("li",[s("code",[t._v("var")]),t._v("变量可以在其范围内更新和重新声明； "),s("code",[t._v("let")]),t._v("变量可以被更新但不能重新声明； "),s("code",[t._v("const")]),t._v("变量既不能更新也不能重新声明。")]),t._v(" "),s("li",[t._v("它们都被提升到其作用域的顶端。 但是，虽然使用变量"),s("code",[t._v("undefined")]),t._v("初始化了"),s("code",[t._v("var")]),t._v("变量，但未初始化"),s("code",[t._v("let")]),t._v("和"),s("code",[t._v("const")]),t._v("变量。")]),t._v(" "),s("li",[t._v("尽管可以在不初始化的情况下声明"),s("code",[t._v("var")]),t._v("和"),s("code",[t._v("let")]),t._v("，但是在声明期间必须初始化"),s("code",[t._v("const")]),t._v("。")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("声明方式")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("变量提升")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("暂时性死区")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("重复声明")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("初始值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("var")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("let")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("const")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✅")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("❌")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("✅")])])])]),t._v(" "),s("p",[t._v("说明：严格意义上let和const存在变量的提升，但是看不到变量提升的效果，上述表格 的变量提升主要说明的是效果勿混淆。")]),t._v(" "),s("h2",{attrs:{id:"参考链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),s("hr"),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6925641096152399880#heading-7",target:"_blank",rel:"noopener noreferrer"}},[t._v("一看就懂的var、let、const三者区别")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://chinese.freecodecamp.org/news/javascript-var-let-and-const/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 中的 Var，Let 和 Const 有什么区别")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/28140450",target:"_blank",rel:"noopener noreferrer"}},[t._v("我用了两个月的时间才理解 let")])])])}),[],!1,null,null,null);a.default=e.exports}}]);