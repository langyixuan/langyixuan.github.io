(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{568:function(n,e,v){"use strict";v.r(e);var _=v(17),p=Object(_.a)({},(function(){var n=this,e=n.$createElement,v=n._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[v("h1",{attrs:{id:"npm-常用命令总结-二"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#npm-常用命令总结-二"}},[n._v("#")]),n._v(" npm 常用命令总结（二）")]),n._v(" "),v("hr"),n._v(" "),v("p",[n._v("之前在下载包的时候接触了几个 npm 命令，索性将常见的命令总结一下。")]),n._v(" "),v("ol",[v("li",[v("code",[n._v("npm adduser")]),n._v("\n添加用户")]),n._v(" "),v("li",[v("code",[n._v("npm access")]),n._v("\n设置包的权限")]),n._v(" "),v("li",[v("code",[n._v("npm bugs")]),n._v("\n打开包的 bugs 报告页面")]),n._v(" "),v("li",[v("code",[n._v("npm bin [—-global]")]),n._v("\n查看 npm 可执行文件的目录")]),n._v(" "),v("li",[v("code",[n._v("npm config get registry")]),n._v("\n获取 npm 仓库地址")]),n._v(" "),v("li",[v("code",[n._v("npm config list [—-json]")]),n._v("\n获取 npm 配置信息")]),n._v(" "),v("li",[v("code",[n._v("npm config edit")]),n._v("\n编辑 npm 的配置信息")]),n._v(" "),v("li",[v("code",[n._v("npm config delete")]),n._v("\n删除某个配置\nnpm c 是 npm config 别名")]),n._v(" "),v("li",[v("code",[n._v("npm cache add")]),n._v("\n通过 git 地址添加某个 tar 包到缓存")]),n._v(" "),v("li",[v("code",[n._v("npm cache clean —force")]),n._v("\n清除缓存文件 npm@5 后必须使用强制符")]),n._v(" "),v("li",[v("code",[n._v("npm cache verify")]),n._v("\n清理无用的缓存文件和校验缓存数据完整性")]),n._v(" "),v("li",[v("code",[n._v("npm completion >> ~/.zsh")]),n._v("\nnpm 开启自动补全命令，设置后，按住 tab 键能自动提示 npm 命令")]),n._v(" "),v("li",[v("code",[n._v("npm deprecate [@]")]),n._v("\n添加对某个包的某个版本的反对信息。只有 owner 才可以，安装此包能看到这些反对信息")]),n._v(" "),v("li",[v("code",[n._v("npm dist-tag add @ []")]),n._v("\n为某个版本添加 tag，如果添加的 tag 为 latest，这个 tag 版本将成为最新版本。用户下载最新的时候会直接下载到该版本")]),n._v(" "),v("li",[v("code",[n._v("npm dist-tag rm")]),n._v("\n移除 tag")]),n._v(" "),v("li",[v("code",[n._v("npm dist-tag ls []")]),n._v("\n查看 tag 清单")]),n._v(" "),v("li",[v("code",[n._v("npm doctor")]),n._v("\nnpm 诊断命令，npm 会对 npm 运行的环境进行检测诊断，包括 npm 的版本，git 版本，npm 使用的文件权限，npm ping 等等")]),n._v(" "),v("li",[v("code",[n._v("npm docs")]),n._v("\n打开包的文档地址")]),n._v(" "),v("li",[v("code",[n._v("npm dedupe")]),n._v("\n通过一些算法 将多个依赖包中重复依赖的包移除，只保留一个\n该命令别名为：npm ddp")]),n._v(" "),v("li",[v("code",[n._v("npm explore [ – ]")]),n._v("\n进入指定的包里执行一些命令，比如执行更新源代码，执行重新编译等")]),n._v(" "),v("li",[v("code",[n._v("npm edit")]),n._v("\n修改包内容")]),n._v(" "),v("li",[v("code",[n._v("npm get key val")]),n._v("\n获取某个配置")]),n._v(" "),v("li",[v("code",[n._v("npm init")]),n._v("\n初始化当前目录为一个包，会生成一个 package.json 的文件")]),n._v(" "),v("li",[v("code",[n._v("npm install")]),n._v("\n不带任何参数，会按照根目录下的 package.json 里的依赖包\n将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下自动生成该目录\n会把该包安装到 node_modules 目录中，不会修改 package.json，之后运行 npm install 命令时，不会自动安装该包")]),n._v(" "),v("li",[v("code",[n._v("npm install [<@scope>/]")]),n._v("\n局部安装某个包，默认安装最新版本")]),n._v(" "),v("li",[v("code",[n._v("npm install [<@scope>/]@")]),n._v("\n局部安装指定版本的某个包（按照 tag）\n该命令的别名是：npm i")]),n._v(" "),v("li",[v("code",[n._v("npm install [<@scope>/] --save")]),n._v("\n简写为：npm install [<@scope>/] -S\n会在 package.json 的 dependencies 属性下添加该包的名称及版本号，之后运行 npm install 命令时，会自动安装模块依赖到 node_modules 目录中\n运行 npm install --production 或者注明 NODE_ENV 变量值为 production 时，会自动下载模块到 node_modules 目录中")]),n._v(" "),v("li",[v("code",[n._v("npm install [<@scope>/] --save-dev")]),n._v("\n简写为 npm install [<@scope>/] -D\n与 npm install [<@scope>/] --save 的区别是：\n--save-dev 会将模块依赖写入 devDependencies 节点，而 --save 是将模块依赖写入 dependencies 节点\n运行 npm install --production 或者注明 NODE_ENV 变量值为 production 时，npm install [<@scope>/] --save-dev 不会自动下载模块到 node_modules 目录中\npackage.json 文件里面的 devDependencies 和 dependencies 对象的区别是什么呢；\n–save-dev 对应的 devDependencies 里面的插件只用于开发环境，不用于生产环境，而 –save 对应的 dependencies 是需要发布到生产环境的\ndevDependencies 节点下的模块是开发时候需要的，如构建工具 glup、webpack，预处理器 less、sass 这些只在开发环境有用，所以使用 –save-dev 安装\ndependencies 节点下的模块是线上代码运行需要的，如 axios、vue-router、vuex，所以需要使用 –-save 安装")]),n._v(" "),v("li",[v("code",[n._v("npm install-test")]),n._v("\n它和 npm install 的区别是执行完 npm install 后立马执行 npm test")]),n._v(" "),v("li",[v("code",[n._v("npm install [<@scope>/] -g")]),n._v("\n全局安装某个包，默认安装最新版本\nnpm install [<@scope>/] --save")]),n._v(" "),v("li",[v("code",[n._v("npm help")]),n._v("\n查看某个命令的帮助信息")]),n._v(" "),v("li",[v("code",[n._v("npm help-search")]),n._v("\n在帮助文档中查找包含关键词的文档列表")]),n._v(" "),v("li",[v("code",[n._v("npm link [<@scope>/][@]")]),n._v("\n将 npm 包创建快捷方式到全局 npm 的路径下")]),n._v(" "),v("li",[v("code",[n._v("npm login")]),n._v("\n登陆用户")]),n._v(" "),v("li",[v("code",[n._v("npm logout")]),n._v("\n退出当前登陆的 npm 账号")]),n._v(" "),v("li",[v("code",[n._v("npm ls、npm list、npm la、npm ll")]),n._v("\n查看当前 npm 包的依赖包列表\nnpm ls 是 npm list 的简写")]),n._v(" "),v("li",[v("code",[n._v("npm outdated")]),n._v("\n查看当前安装的包里版本是否过期的信息")]),n._v(" "),v("li",[v("code",[n._v("npm owner add [<@scope>/]")]),n._v("\n添加某个用户作为某个包的管理者")]),n._v(" "),v("li",[v("code",[n._v("npm owner rm [<@scope>/]")]),n._v("\n移除某个用户作为某个包的管理者")]),n._v(" "),v("li",[v("code",[n._v("npm owner ls [<@scope>/]")]),n._v("\n查看某个包的管理者")]),n._v(" "),v("li",[v("code",[n._v("npm ping")]),n._v("\n验证 registry 的连通性和身份验证")]),n._v(" "),v("li",[v("code",[n._v("npm pack")]),n._v("\n将当前 npm 包文件打成一个压缩包")]),n._v(" "),v("li",[v("code",[n._v("npm prune")]),n._v("\n移除没有定义在 package.json 依赖配置上的包")]),n._v(" "),v("li",[v("code",[n._v("npm publish [|] [–tag ] [–access <public|restricted>]")]),n._v("\n发布一个包\n用户个人信息管理")]),n._v(" "),v("li",[v("code",[n._v("npm profile get [–json|–parseable] []")]),n._v("\n获取个人信息")]),n._v(" "),v("li",[v("code",[n._v("npm profile set [–json|–parseable]")]),n._v("\n设置个人信息")]),n._v(" "),v("li",[v("code",[n._v("npm profile set password")]),n._v("\n设置密码")]),n._v(" "),v("li",[v("code",[n._v("npm profile enable-2fa [auth-and-writes|auth-only]")]),n._v("\n设置开启双重验证")]),n._v(" "),v("li",[v("code",[n._v("npm profile disable-2fa")]),n._v("\n关闭开启双重验证")]),n._v(" "),v("li",[v("code",[n._v("npm prefix [-g]")]),n._v("\n查看最靠近 package.json 的父级目录")]),n._v(" "),v("li",[v("code",[n._v("npm root [-g]")]),n._v("\n查看本地或者全局 node-module 目录的位置")]),n._v(" "),v("li",[v("code",[n._v("npm repo []")]),n._v("\n打开包的源文件管理地址 比如 github 地址")]),n._v(" "),v("li",[v("code",[n._v("npm restart")]),n._v("\n运行当前目录下的 package.json 里的 scripts 里的 restart 命令，如果没有，则执行 npm stop 再执行 npm start")]),n._v(" "),v("li",[v("code",[n._v("npm run-script [-- …]")]),n._v("\n运行当前目录下的 package.json 里的 scripts 里的命令\n该命令的别名是：npm run")]),n._v(" "),v("li",[v("code",[n._v("npm rebuild [[<@scope>/]…]")]),n._v("\n执行编译某个包\n该命令的别名是：npm rb")]),n._v(" "),v("li",[v("code",[n._v("npm search [–long] [search terms …]")]),n._v("\n从远程仓库中搜索某个包的信息")]),n._v(" "),v("li",[v("code",[n._v("npm set key val")]),n._v("\n设置某个配置")]),n._v(" "),v("li",[v("code",[n._v("npm stop")]),n._v("\n运行当前目录下的 package.json 里的 scripts 里的 top 命令，如果有的话")]),n._v(" "),v("li",[v("code",[n._v("npm start")]),n._v("\n运行当前目录下的 package.json 里的 scripts 里的 start 命令，如果有的话")]),n._v(" "),v("li",[v("code",[n._v("npm star […]")]),n._v("\n将某个包加入当前用户的感兴趣的清单")]),n._v(" "),v("li",[v("code",[n._v("npm stars []")]),n._v("\n列出该用户所有感兴趣的包")]),n._v(" "),v("li",[v("code",[n._v("npm shrinkwrap")]),n._v("\n生成当前项目确定的依赖版本，类似 package-lock.json，但是还是有略微区别")]),n._v(" "),v("li",[v("code",[n._v("npm test [-- ]")]),n._v("\n运行当前目录下的 package.json 里的 scripts 里的 test 命令，如果有的话")]),n._v(" "),v("li",[v("code",[n._v("npm team")]),n._v("\n管理所属团队或者添加团队成员等")]),n._v(" "),v("li",[v("code",[n._v("npm token")]),n._v("\n身份令牌管理")]),n._v(" "),v("li",[v("code",[n._v("npm uninstall")]),n._v("\n卸载某个包\n该命令的别名是：npm un")]),n._v(" "),v("li",[v("code",[n._v("npm update [-g] […]")]),n._v("\n更新包\n该命令的别名是：npm up [-g][…]")]),n._v(" "),v("li",[v("code",[n._v("npm unpublish [<@scope>/")]),n._v("][@]\n取消发布包，将发布的包从远程仓库中删除")]),n._v(" "),v("li",[v("code",[n._v("npm unstar […]")]),n._v("\n将某个包移除当前用户清单")]),n._v(" "),v("li",[v("code",[n._v("npm version")]),n._v("\n查看各个依赖的版本")]),n._v(" "),v("li",[v("code",[n._v("npm whoami")]),n._v("\nnpm 当前登陆用户")]),n._v(" "),v("li",[v("code",[n._v("npm -l")]),n._v("\n查看所有命令的用例信息")]),n._v(" "),v("li",[v("code",[n._v("npm -h")]),n._v("\n查看某个命令的用法")])])])}),[],!1,null,null,null);e.default=p.exports}}]);